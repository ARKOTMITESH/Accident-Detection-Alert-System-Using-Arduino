import serial
import time
import math
import requests  # Optional, for making HTTP requests
from tinygpsplus import TinyGPSPlus

# Define constants
GPS_BAUD = 9600
GSM_BAUD = 9600
ACCIDENT_THRESHOLD = 20.0  # Threshold for collision detection
PHONE_NUMBER = "+917075403540"  # Replace with your emergency contact number

class AccidentDetectionSystem:
    def __init__(self):
        # Initialize serial communications
        self.gps_serial = serial.Serial('/dev/ttyUSB0', GPS_BAUD)  # Adjust port as necessary
        self.gsm_serial = serial.Serial('/dev/ttyUSB1', GSM_BAUD)  # Adjust port as necessary
        self.gps = TinyGPSPlus()
        self.accident_detected = False

        # Set up GSM module
        self.gsm_serial.write(b'AT\r')
        time.sleep(1)
        self.gsm_serial.write(b'AT+CMGF=1\r')  # Set SMS mode to text
        time.sleep(1)

    def read_accelerometer(self):
        # Placeholder for accelerometer reading
        # Replace with actual accelerometer reading logic
        return 0, 0, 0  # Replace with actual x, y, z values from accelerometer

    def check_accident(self):
        x, y, z = self.read_accelerometer()
        acceleration = math.sqrt(x**2 + y**2 + z**2)
        
        if acceleration > ACCIDENT_THRESHOLD:
            if not self.accident_detected:
                self.accident_detected = True
                self.send_alert()
        else:
            self.accident_detected = False

    def read_gps(self):
        while self.gps_serial.in_waiting > 0:
            self.gps.encode(self.gps_serial.read())
            if self.gps.location.is_updated():
                latitude = self.gps.location.lat()
                longitude = self.gps.location.lng()
                return latitude, longitude
        return None, None

    def send_alert(self):
        latitude, longitude = self.read_gps()
        if latitude is not None and longitude is not None:
            message = f"Accident detected! Location: http://maps.google.com/?q={latitude},{longitude}"
            self.gsm_serial.write(f'AT+CMGS="{PHONE_NUMBER}"\r'.encode())
            time.sleep(1)
            self.gsm_serial.write(f'{message}\r'.encode())
            time.sleep(1)
            self.gsm_serial.write(bytes([26]))  # ASCII code for CTRL+Z
            time.sleep(1)

    def run(self):
        while True:
            self.check_accident()
            time.sleep(1)  # Loop delay

if __name__ == "__main__":
    accident_system = AccidentDetectionSystem()
    accident_system.run()

